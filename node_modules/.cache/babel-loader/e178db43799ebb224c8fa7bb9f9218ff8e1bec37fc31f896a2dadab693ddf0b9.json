{"ast":null,"code":"export function odom_flip_x(x, flipMode) {\n  if (flipMode === \"alliance\" || flipMode === \"both\") return -x;\n  return x;\n}\nexport function odom_flip_y(y, flipMode) {\n  if (flipMode === \"corner\" || flipMode === \"both\") return -y;\n  return y;\n}\nexport function odom_flip_theta(theta, flipMode) {\n  if (flipMode === \"both\") return normalizeHeading(theta + 180);\n  if (flipMode === \"corner\" || flipMode === \"alliance\") return normalizeHeading(-theta);\n  return normalizeHeading(theta);\n}\nfunction normalizeHeading(angle) {\n  return (angle % 360 + 360) % 360;\n}","map":{"version":3,"names":["odom_flip_x","x","flipMode","odom_flip_y","y","odom_flip_theta","theta","normalizeHeading","angle"],"sources":["/Users/angelajiang/vex-auton-tool2/src/utils/mirroring.js"],"sourcesContent":["export function odom_flip_x(x, flipMode) {\n  if (flipMode === \"alliance\" || flipMode === \"both\") return -x;\n  return x;\n}\n\nexport function odom_flip_y(y, flipMode) {\n  if (flipMode === \"corner\" || flipMode === \"both\") return -y;\n  return y;\n}\n\nexport function odom_flip_theta(theta, flipMode) {\n  if (flipMode === \"both\") return normalizeHeading(theta + 180);\n  if (flipMode === \"corner\" || flipMode === \"alliance\")\n    return normalizeHeading(-theta);\n  return normalizeHeading(theta);\n}\n\nfunction normalizeHeading(angle) {\n  return ((angle % 360) + 360) % 360;\n}\n"],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,CAAC,EAAEC,QAAQ,EAAE;EACvC,IAAIA,QAAQ,KAAK,UAAU,IAAIA,QAAQ,KAAK,MAAM,EAAE,OAAO,CAACD,CAAC;EAC7D,OAAOA,CAAC;AACV;AAEA,OAAO,SAASE,WAAWA,CAACC,CAAC,EAAEF,QAAQ,EAAE;EACvC,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,MAAM,EAAE,OAAO,CAACE,CAAC;EAC3D,OAAOA,CAAC;AACV;AAEA,OAAO,SAASC,eAAeA,CAACC,KAAK,EAAEJ,QAAQ,EAAE;EAC/C,IAAIA,QAAQ,KAAK,MAAM,EAAE,OAAOK,gBAAgB,CAACD,KAAK,GAAG,GAAG,CAAC;EAC7D,IAAIJ,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,UAAU,EAClD,OAAOK,gBAAgB,CAAC,CAACD,KAAK,CAAC;EACjC,OAAOC,gBAAgB,CAACD,KAAK,CAAC;AAChC;AAEA,SAASC,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,OAAO,CAAEA,KAAK,GAAG,GAAG,GAAI,GAAG,IAAI,GAAG;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}