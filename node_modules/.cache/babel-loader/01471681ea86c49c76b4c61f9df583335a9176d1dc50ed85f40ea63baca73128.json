{"ast":null,"code":"function generateEZTemplateAuton({\n  points,\n  mirroredCorner\n}) {\n  const codeLines = [\"// EZ-Template Auton Path\", \"chassis.pid_odom_behavior_set(ez::shortest);\", \"chassis.slew_drive_constants_set(distance, limited_speed); // set the slew drive constants\", \"\"];\n  if (mirroredCorner) {\n    codeLines.push(\"odom_x_flip();\");\n    codeLines.push(\"\");\n  }\n  points.forEach((point, i) => {\n    var _point$x$toFixed, _point$x, _point$y$toFixed, _point$y, _point$heading;\n    const x = (_point$x$toFixed = (_point$x = point.x) === null || _point$x === void 0 ? void 0 : _point$x.toFixed(3)) !== null && _point$x$toFixed !== void 0 ? _point$x$toFixed : 0;\n    const y = (_point$y$toFixed = (_point$y = point.y) === null || _point$y === void 0 ? void 0 : _point$y.toFixed(3)) !== null && _point$y$toFixed !== void 0 ? _point$y$toFixed : 0;\n    const heading = (_point$heading = point.heading) !== null && _point$heading !== void 0 ? _point$heading : 0;\n    const {\n      \"intake how many blocks?\": intake = 0,\n      \"outtake how many blocks?\": outtake = 0,\n      \"stop here for (ms)\": wait = 0,\n      slew = false,\n      \"toggle outtaking piston\": piston,\n      \"dir get to this point?\": direction = \"fwd\"\n    } = point !== null && point !== void 0 ? point : {};\n    if (i === 0) {\n      codeLines.push(\"// starting pos:\");\n      codeLines.push(`chassis.odom_xyt_set(${x}, ${y}, ${heading});`);\n      codeLines.push(\"\");\n    } else {\n      codeLines.push(`// Move to point ${i + 1}`);\n      codeLines.push(`chassis.pid_odom_set({ ${x}, ${y} }, ${direction}, ${heading}, ${slew});`);\n    }\n    if (wait > 0) codeLines.push(`// stop and wait here for ${wait} ms`);\n    if (intake > 0) codeLines.push(`// intake ${intake} blocks`);\n    if (outtake > 0) codeLines.push(`// outtake ${outtake} blocks`);\n    if (piston !== undefined && piston !== null) codeLines.push(`// set the piston controlling outtake height to ${piston}`);\n    codeLines.push(\"\");\n  });\n  codeLines.push(\"chassis.pid_wait();\");\n  return codeLines.join(\"\\n\");\n}\nexport { generateEZTemplateAuton };","map":{"version":3,"names":["generateEZTemplateAuton","points","mirroredCorner","codeLines","push","forEach","point","i","_point$x$toFixed","_point$x","_point$y$toFixed","_point$y","_point$heading","x","toFixed","y","heading","intake","outtake","wait","slew","piston","direction","undefined","join"],"sources":["/Users/angelajiang/vex-auton-tool2/src/utils/ezlogic.js"],"sourcesContent":["function generateEZTemplateAuton({ points, mirroredCorner }) {\n  const codeLines = [\n    \"// EZ-Template Auton Path\",\n    \"chassis.pid_odom_behavior_set(ez::shortest);\",\n    \"chassis.slew_drive_constants_set(distance, limited_speed); // set the slew drive constants\",\n    \"\",\n  ];\n\n  if (mirroredCorner) {\n    codeLines.push(\"odom_x_flip();\");\n    codeLines.push(\"\");\n  }\n\n  points.forEach((point, i) => {\n    const x = point.x?.toFixed(3) ?? 0;\n    const y = point.y?.toFixed(3) ?? 0;\n    const heading = point.heading ?? 0;\n    const {\n      \"intake how many blocks?\": intake = 0,\n      \"outtake how many blocks?\": outtake = 0,\n      \"stop here for (ms)\": wait = 0,\n      slew = false,\n      \"toggle outtaking piston\": piston,\n      \"dir get to this point?\": direction = \"fwd\",\n    } = point ?? {};\n\n    if (i === 0) {\n      codeLines.push(\"// starting pos:\");\n      codeLines.push(`chassis.odom_xyt_set(${x}, ${y}, ${heading});`);\n      codeLines.push(\"\");\n    } else {\n      codeLines.push(`// Move to point ${i + 1}`);\n      codeLines.push(\n        `chassis.pid_odom_set({ ${x}, ${y} }, ${direction}, ${heading}, ${slew});`\n      );\n    }\n\n    if (wait > 0) codeLines.push(`// stop and wait here for ${wait} ms`);\n    if (intake > 0) codeLines.push(`// intake ${intake} blocks`);\n    if (outtake > 0) codeLines.push(`// outtake ${outtake} blocks`);\n    if (piston !== undefined && piston !== null)\n      codeLines.push(\n        `// set the piston controlling outtake height to ${piston}`\n      );\n\n    codeLines.push(\"\");\n  });\n\n  codeLines.push(\"chassis.pid_wait();\");\n\n  return codeLines.join(\"\\n\");\n}\n\nexport { generateEZTemplateAuton };\n"],"mappings":"AAAA,SAASA,uBAAuBA,CAAC;EAAEC,MAAM;EAAEC;AAAe,CAAC,EAAE;EAC3D,MAAMC,SAAS,GAAG,CAChB,2BAA2B,EAC3B,8CAA8C,EAC9C,4FAA4F,EAC5F,EAAE,CACH;EAED,IAAID,cAAc,EAAE;IAClBC,SAAS,CAACC,IAAI,CAAC,gBAAgB,CAAC;IAChCD,SAAS,CAACC,IAAI,CAAC,EAAE,CAAC;EACpB;EAEAH,MAAM,CAACI,OAAO,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;IAAA,IAAAC,gBAAA,EAAAC,QAAA,EAAAC,gBAAA,EAAAC,QAAA,EAAAC,cAAA;IAC3B,MAAMC,CAAC,IAAAL,gBAAA,IAAAC,QAAA,GAAGH,KAAK,CAACO,CAAC,cAAAJ,QAAA,uBAAPA,QAAA,CAASK,OAAO,CAAC,CAAC,CAAC,cAAAN,gBAAA,cAAAA,gBAAA,GAAI,CAAC;IAClC,MAAMO,CAAC,IAAAL,gBAAA,IAAAC,QAAA,GAAGL,KAAK,CAACS,CAAC,cAAAJ,QAAA,uBAAPA,QAAA,CAASG,OAAO,CAAC,CAAC,CAAC,cAAAJ,gBAAA,cAAAA,gBAAA,GAAI,CAAC;IAClC,MAAMM,OAAO,IAAAJ,cAAA,GAAGN,KAAK,CAACU,OAAO,cAAAJ,cAAA,cAAAA,cAAA,GAAI,CAAC;IAClC,MAAM;MACJ,yBAAyB,EAAEK,MAAM,GAAG,CAAC;MACrC,0BAA0B,EAAEC,OAAO,GAAG,CAAC;MACvC,oBAAoB,EAAEC,IAAI,GAAG,CAAC;MAC9BC,IAAI,GAAG,KAAK;MACZ,yBAAyB,EAAEC,MAAM;MACjC,wBAAwB,EAAEC,SAAS,GAAG;IACxC,CAAC,GAAGhB,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,CAAC,CAAC;IAEf,IAAIC,CAAC,KAAK,CAAC,EAAE;MACXJ,SAAS,CAACC,IAAI,CAAC,kBAAkB,CAAC;MAClCD,SAAS,CAACC,IAAI,CAAC,wBAAwBS,CAAC,KAAKE,CAAC,KAAKC,OAAO,IAAI,CAAC;MAC/Db,SAAS,CAACC,IAAI,CAAC,EAAE,CAAC;IACpB,CAAC,MAAM;MACLD,SAAS,CAACC,IAAI,CAAC,oBAAoBG,CAAC,GAAG,CAAC,EAAE,CAAC;MAC3CJ,SAAS,CAACC,IAAI,CACZ,0BAA0BS,CAAC,KAAKE,CAAC,OAAOO,SAAS,KAAKN,OAAO,KAAKI,IAAI,IACxE,CAAC;IACH;IAEA,IAAID,IAAI,GAAG,CAAC,EAAEhB,SAAS,CAACC,IAAI,CAAC,6BAA6Be,IAAI,KAAK,CAAC;IACpE,IAAIF,MAAM,GAAG,CAAC,EAAEd,SAAS,CAACC,IAAI,CAAC,aAAaa,MAAM,SAAS,CAAC;IAC5D,IAAIC,OAAO,GAAG,CAAC,EAAEf,SAAS,CAACC,IAAI,CAAC,cAAcc,OAAO,SAAS,CAAC;IAC/D,IAAIG,MAAM,KAAKE,SAAS,IAAIF,MAAM,KAAK,IAAI,EACzClB,SAAS,CAACC,IAAI,CACZ,mDAAmDiB,MAAM,EAC3D,CAAC;IAEHlB,SAAS,CAACC,IAAI,CAAC,EAAE,CAAC;EACpB,CAAC,CAAC;EAEFD,SAAS,CAACC,IAAI,CAAC,qBAAqB,CAAC;EAErC,OAAOD,SAAS,CAACqB,IAAI,CAAC,IAAI,CAAC;AAC7B;AAEA,SAASxB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}